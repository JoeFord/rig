.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Acme::Teddy 3"
.TH Acme::Teddy 3 "2011-12-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Acme::Teddy \- Chewy target for your pitbull testing module
.SH "VERSION"
.IX Header "VERSION"
This document describes Acme::Teddy version 1.002003
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    # teddytest.t
\&    {
\&        package Acme::Teddy;
\&        sub chewtoy{ \*(AqSqueek!\*(Aq };
\&        our $yogi   = \*(Aqbear\*(Aq;
\&    }
\&    package main;
\&    use Acme::Teddy qw( chewtoy $yogi );
\&    use Test::More tests => 2;
\&    is( chewtoy(),  \*(AqSqueek!\*(Aq,          \*(Aqteddy\-squeek\*(Aq  );
\&    is( $yogi,      \*(Aqbear\*(Aq,             \*(Aqteddy\-bear\*(Aq    );
\&
\&    # teddytest\-oo.t
\&    {
\&        package Acme::Teddy;
\&        sub talk{ \*(AqYabba dabba do!\*(Aq };
\&    }
\&    package main;
\&    use Acme::Teddy;
\&    use Test::More tests => 1;
\&    my $bear    = Acme::Teddy::new();
\&    my $talk    = $bear\->talk();
\&    is( $talk,      \*(AqYabba dabba do!\*(Aq,  \*(Aqteddy\-oo\-talk\*(Aq    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIDo what you can, with what you have, where you are.\fR \-\-Teddy Roosevelt
.PP
Testing modules need something to test. 
Acme::Teddy is all things to all bears.
.PP
Switch into \f(CW\*(C`package Acme::Teddy\*(C'\fR in your test script, define whatever you 
like there. Then switch back to \f(CW\*(C`package main\*(C'\fR and test your testing module.
.PP
Note that it is often \fIcompletely unnecessary\fR to use this module! You can achieve similar results with:
.PP
.Vb 5
\&    {
\&        package Frobnitz::Blowhard;
\&        sub foo{ return \*(Aqfoo\*(Aq . shift };
\&    }
\&    print Frobnitz::Blowhard::foo(\*(Aqbar\*(Aq);
.Ve
.PP
Although you may find it slightly more convenient, the main purpose of 
Acme::Teddy is to give you the comfort of using a \*(L"real\*(R" module.
.SH "FUNCTIONS/METHODS"
.IX Header "FUNCTIONS/METHODS"
.SS "\fIimport()\fP"
.IX Subsection "import()"
This is a cut-down copy of Exporter::Heavy::\fIheavy_export()\fR 
(the same routine that \fBExporter\fR uses normally to export stuff on request).
.PP
There are two reasons we don't say \f(CW\*(C`@ISA = qw(Exporter);\*(C'\fR. We don't want to 
introduce any dependencies whatsoever; and we offer caller the freedom to 
export anything at all. Almost no checking is done of arguments passed 
to \f(CW\*(C`import()\*(C'\fR (normally, on the \f(CW\*(C`use()\*(C'\fR line).
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&    my $bear    = $class\->new($ref, @args);
.Ve
.PP
This is a flexible, robust, subclassable object constructor.
.PP
.Vb 6
\&    my $bear    = Acme::Teddy\->new();
\&    my $bear    = Acme::Teddy\->new( [] );
\&    my $bear    = Acme::Teddy\->new( \e&my_sub );
\&    my $bear    = Acme::Teddy\->new( { \-a  => \*(Aqx\*(Aq } );
\&    my $bear    = Acme::Teddy\->new( [ 1, 2, 3, 4 ] );
\&    my $bear    = Acme::Teddy\->new( {}, @some_data );
.Ve
.PP
It will bless any reference. If invoked with \f(CW$class\fR only, 
blesses an empty hashref and calls \*(L"\fIinit()\fR\*(R" with no arguments.
.PP
If invoked with \f(CW$class\fR and a reference,
blesses the reference and calls \*(L"\fIinit()\fR\*(R" with any remaining \f(CW@args\fR.
.SS "\fIinit()\fP"
.IX Subsection "init()"
This is a placeholder method. You might want to override it in a subclass. 
For common initializations, you can just invoke \*(L"\fInew()\fR\*(R" with initial data.
.SH "INTERFACE"
.IX Header "INTERFACE"
.Vb 8
\&    {
\&        package Acme::Teddy;
\&        # Your target code here.
\&    }
\&    package main;
\&    use Acme::Teddy;
\&    use Test::Your::Testing::Module;
\&    # Your test here.
.Ve
.PP
Start a test script with a bare block in \s-1AT\s0 (or subclass it). Then define 
whatever behavior you like. After you switch into \*(L"your own\*(R" package, test 
for that behavior. You should be able to verify by eye that your expectations 
are correct; therefore, you can concentrate on debugging your testing module.
.PP
Writing the bare block is just like writing a module, except that much of the 
dull work is done for you.
.PP
Lexical declarations will \*(L"leak\*(R" across package boundaries if you leave off 
the bare block; so don't do that. It does not seem to be necessary to make 
this a \f(CW\*(C`BEGIN\*(C'\fR block; if you find any counterexample, please contact author.
.PP
Import whatever you like when you \f(CW\*(C`use Acme::Teddy\*(C'\fR. 
Be sure to define it, whatever it is. 
\&\s-1AT\s0 will attempt to export to caller \fIeverything\fR you request.
.PP
You don't have to import anything. 
You can invoke a function (that you defined) with:
.PP
.Vb 1
\&    my $return  = Acme::Teddy::my_button_nose();
.Ve
.PP
Or invoke a method:
.PP
.Vb 1
\&    $bear\->talk();
.Ve
.PP
Don't forget to define that method!
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "$pkg: Can't export symbol: $type$sym" 4
.el .IP "\f(CW$pkg:\fR Can't export symbol: \f(CW$type\fR$sym" 4
.IX Item "$pkg: Can't export symbol: $type$sym"
You tried to import something bizarre. Check your \f(CW\*(C`use()\*(C'\fR line.
.Sp
Rationally, you can only export \fIsymbols\fR from one package to another. 
These can be barewords, which will be interpreted as subroutines; 
scalar, array, or hash variables; coderefs; or typeglobs.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Acme::Teddy requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
No dependencies.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
You really do have to define stuff yourself or it does nothing.
.PP
Lexical variables aren't found in package symbol tables.
.SH "THANKS"
.IX Header "THANKS"
.IP "\(bu" 4
\&\fBjames2vegas\fR of PerlMonks <http://perlmonks.org/> 
for improvements in the test script.
.SH "AUTHOR"
.IX Header "AUTHOR"
Xiong Changnian  \f(CW\*(C`<xiong@cpan.org>\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2010 Xiong Changnian \f(CW\*(C`<xiong@cpan.org>\*(C'\fR
.PP
This library and its contents are released under Artistic License 2.0:
.PP
http://www.opensource.org/licenses/artistic\-license\-2.0.php <http://www.opensource.org/licenses/artistic-license-2.0.php>
